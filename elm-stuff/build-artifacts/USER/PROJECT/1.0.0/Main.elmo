Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Collision2D = Elm.Collision2D.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Vector2 = Elm.Math.Vector2.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $RktConst = Elm.RktConst.make(_elm),
   $RktGeo = Elm.RktGeo.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var relativeAngle = function (motion) {
      return function () {
         switch (motion.ctor)
         {case "_Tuple2":
            switch (motion._0)
              {case -1: switch (motion._1)
                   {case -1:
                      return $Basics.negate($Basics.pi * 0.75);
                      case 0: return $Basics.pi;
                      case 1:
                      return $Basics.pi * 0.75;}
                   break;
                 case 0: switch (motion._1)
                   {case -1:
                      return $Basics.negate($Basics.pi / 2);
                      case 1: return $Basics.pi / 2;}
                   break;
                 case 1: switch (motion._1)
                   {case -1:
                      return $Basics.negate($Basics.pi * 0.25);
                      case 0: return 0;
                      case 1:
                      return $Basics.pi * 0.25;}
                   break;}
              break;}
         return 0;
      }();
   };
   var drawBlock = function (b) {
      return $Graphics$Collage.move(b.pos)($Graphics$Collage.filled(b.color)(A2($Graphics$Collage.rect,
      b.length,
      b.length)));
   };
   var render = function (model) {
      return A3($Graphics$Collage.collage,
      $RktConst.windowW,
      $RktConst.windowH,
      A2($Basics._op["++"],
      _L.fromArray([$Graphics$Collage.filled($Color.lightGrey)(A2($Graphics$Collage.rect,
                   $Basics.toFloat($RktConst.windowW),
                   $Basics.toFloat($RktConst.windowH)))
                   ,$Graphics$Collage.move({ctor: "_Tuple2"
                                           ,_0: $Basics.fst(model.pos)
                                           ,_1: $Basics.snd(model.pos)})($Graphics$Collage.rotate(model.angle)($Graphics$Collage.filled($Color.green)(A2($Graphics$Collage.ngon,
                   3,
                   model.playerSize))))]),
      A2($List.map,
      drawBlock,
      model.blocks)));
   };
   var Block = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: c
             ,length: a
             ,pos: b};
   });
   var init = {_: {}
              ,angle: 0
              ,blocks: _L.fromArray([A3(Block,
                                    30,
                                    {ctor: "_Tuple2",_0: 60,_1: 60},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2",_0: 90,_1: 60},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: 120
                                    ,_1: 60},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -60
                                    ,_1: -30},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -60
                                    ,_1: -60},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -60
                                    ,_1: -90},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -400
                                    ,_1: -100},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -400
                                    ,_1: -80},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -400
                                    ,_1: -50},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -370
                                    ,_1: -50},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -340
                                    ,_1: -50},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -340
                                    ,_1: -80},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -340
                                    ,_1: -100},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -370
                                    ,_1: -100},
                                    $Color.purple)
                                    ,A3(Block,
                                    30,
                                    {ctor: "_Tuple2"
                                    ,_0: -400
                                    ,_1: 200},
                                    $Color.purple)])
              ,playerSize: $RktConst.playerSize
              ,pos: {ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: 0}
              ,vel: {ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: 0}
              ,viewport: {ctor: "_Tuple2"
                         ,_0: $RktConst.windowW
                         ,_1: $RktConst.windowH}};
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,angle: c
             ,blocks: f
             ,playerSize: e
             ,pos: a
             ,vel: b
             ,viewport: d};
   });
   var addVelocity = F2(function (_v3,
   _v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v3.ctor)
                 {case "_Tuple2":
                    return function () {
                         var maxvel = 5;
                         var calcy = _v3._1 + $Basics.toFloat(_v4._1);
                         var calcx = _v3._0 + $Basics.toFloat(_v4._0);
                         return {ctor: "_Tuple2"
                                ,_0: A2($Basics.max,
                                $Basics.negate(maxvel),
                                A2($Basics.min,calcx,maxvel))
                                ,_1: A2($Basics.max,
                                $Basics.negate(maxvel),
                                A2($Basics.min,calcy,maxvel))};
                      }();}
                 _U.badCase($moduleName,
                 "between lines 110 and 115");
              }();}
         _U.badCase($moduleName,
         "between lines 110 and 115");
      }();
   });
   var oneCollide = F2(function (ppoints,
   b) {
      return function () {
         var bpoints = A2($RktGeo.rectToPoints,
         b.length,
         b.pos);
         var didCollide = A2($List.any,
         A2($Basics.flip,
         $Collision2D.isInside,
         $Collision2D.fromVectors(ppoints)),
         bpoints) || A2($List.any,
         A2($Basics.flip,
         $Collision2D.isInside,
         $Collision2D.fromVectors(bpoints)),
         ppoints);
         return A2($Debug.watch,
         "didcollide",
         didCollide);
      }();
   });
   var decideVel = F3(function (model,
   vel,
   b) {
      return function () {
         var lpos = {ctor: "_Tuple2"
                    ,_0: b.length / 2 - $Basics.fst(b.pos)
                    ,_1: $Basics.snd(b.pos)};
         var ldist = A2($RktGeo.dist,
         model.pos,
         lpos);
         var rpos = {ctor: "_Tuple2"
                    ,_0: b.length / 2 + $Basics.fst(b.pos)
                    ,_1: $Basics.snd(b.pos)};
         var rdist = A2($RktGeo.dist,
         model.pos,
         rpos);
         var dpos = {ctor: "_Tuple2"
                    ,_0: $Basics.fst(b.pos)
                    ,_1: b.length / 2 - $Basics.snd(b.pos)};
         var ddist = A2($RktGeo.dist,
         model.pos,
         dpos);
         var upos = {ctor: "_Tuple2"
                    ,_0: $Basics.fst(b.pos)
                    ,_1: b.length / 2 + $Basics.snd(b.pos)};
         var udist = A2($RktGeo.dist,
         model.pos,
         upos);
         var allmin = A3($List.foldl,
         $Basics.min,
         9999,
         _L.fromArray([udist
                      ,ddist
                      ,rdist
                      ,ldist]));
         return _U.eq(allmin,
         udist) || _U.eq(allmin,
         ddist) ? {ctor: "_Tuple2"
                  ,_0: $Basics.fst(vel)
                  ,_1: $Basics.negate($Basics.snd(vel))} : {ctor: "_Tuple2"
                                                           ,_0: $Basics.negate($Basics.fst(vel))
                                                           ,_1: $Basics.snd(vel)};
      }();
   });
   var checkCollision = F3(function (model,
   blocks,
   vel) {
      return function () {
         switch (blocks.ctor)
         {case "::":
            return A2(oneCollide,
              A3($RktGeo.triToPoints,
              model.playerSize,
              model.angle,
              model.pos),
              blocks._0) ? A3(decideVel,
              model,
              vel,
              blocks._0) : A3(checkCollision,
              model,
              blocks._1,
              vel);
            case "[]": return vel;}
         _U.badCase($moduleName,
         "between lines 79 and 84");
      }();
   });
   var changePos = function (model) {
      return function () {
         var newPos = {ctor: "_Tuple2"
                      ,_0: $Basics.fst(model.pos) + $Basics.fst(model.vel)
                      ,_1: $Basics.snd(model.pos) + $Basics.snd(model.vel)};
         return _U.replace([["pos"
                            ,A2($Debug.watch,
                            "newPos",
                            newPos)]],
         model);
      }();
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Thrust":
            return function () {
                 var newAngle = !_U.eq(action._0,
                 {ctor: "_Tuple2"
                 ,_0: 0
                 ,_1: 0}) ? relativeAngle(action._0) : model.angle;
                 return changePos(_U.replace([["vel"
                                              ,A2(checkCollision,
                                              model,
                                              model.blocks)(A2(addVelocity,
                                              model.vel,
                                              action._0))]
                                             ,["angle",newAngle]],
                 model));
              }();
            case "Tick":
            return function () {
                 var yframeDecay = _U.cmp($Basics.snd(model.vel),
                 0) > 0 ? $RktConst.decay * -1 : $RktConst.decay;
                 var xframeDecay = _U.cmp($Basics.fst(model.vel),
                 0) > 0 ? $RktConst.decay * -1 : $RktConst.decay;
                 var newVel = {ctor: "_Tuple2"
                              ,_0: $Basics.fst(model.vel) + xframeDecay
                              ,_1: $Basics.snd(model.vel) + yframeDecay};
                 return changePos(_U.replace([["vel"
                                              ,A3(checkCollision,
                                              model,
                                              model.blocks,
                                              newVel)]],
                 model));
              }();}
         _U.badCase($moduleName,
         "between lines 42 and 62");
      }();
   });
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var Thrust = function (a) {
      return {ctor: "Thrust"
             ,_0: a};
   };
   var signals = $Signal.mergeMany(_L.fromArray([A2($Signal.map,
                                                function (_v17) {
                                                   return function () {
                                                      return Thrust({ctor: "_Tuple2"
                                                                    ,_0: _v17.x
                                                                    ,_1: _v17.y});
                                                   }();
                                                },
                                                A2($Signal.sampleOn,
                                                $Time.fps(15),
                                                $Keyboard.wasd))
                                                ,A2($Signal.map,
                                                Tick,
                                                $Time.fps(60))]));
   var model = A3($Signal.foldp,
   update,
   init,
   signals);
   var main = A2($Signal.map,
   render,
   model);
   _elm.Main.values = {_op: _op
                      ,signals: signals
                      ,Thrust: Thrust
                      ,Tick: Tick
                      ,main: main
                      ,update: update
                      ,changePos: changePos
                      ,checkCollision: checkCollision
                      ,decideVel: decideVel
                      ,oneCollide: oneCollide
                      ,addVelocity: addVelocity
                      ,Model: Model
                      ,init: init
                      ,model: model
                      ,Block: Block
                      ,render: render
                      ,drawBlock: drawBlock
                      ,relativeAngle: relativeAngle};
   return _elm.Main.values;
};