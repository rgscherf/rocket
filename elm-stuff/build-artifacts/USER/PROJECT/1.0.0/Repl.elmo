Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $Collision2D = Elm.Collision2D.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Vector2 = Elm.Math.Vector2.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var t = $Collision2D.fromVectors(_L.fromArray([A2($Math$Vector2.vec2,
                                                 -1,
                                                 1)
                                                 ,A2($Math$Vector2.vec2,-1,-1)
                                                 ,A2($Math$Vector2.vec2,1,-1)
                                                 ,A2($Math$Vector2.vec2,1,1)]));
   var deltron3030 = A2($Collision2D.isInside,
   A2($Math$Vector2.vec2,0,0),
   t);
   _elm.Repl.values = {_op: _op
                      ,deltron3030: deltron3030
                      ,t: t
                      ,tsol: tsol};
   return _elm.Repl.values;
};