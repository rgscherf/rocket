Elm.RocketGeometry = Elm.RocketGeometry || {};
Elm.RocketGeometry.make = function (_elm) {
   "use strict";
   _elm.RocketGeometry = _elm.RocketGeometry || {};
   if (_elm.RocketGeometry.values)
   return _elm.RocketGeometry.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "RocketGeometry",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Vector2 = Elm.Math.Vector2.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var rectRadius = function (length) {
      return function () {
         var half = length / 2;
         return $Basics.sqrt(2 * Math.pow(half,
         2));
      }();
   };
   var triRadius = function (length) {
      return length / $Basics.sqrt(3);
   };
   var rotatedPoint = F3(function (radius,
   _v0,
   angle) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var newy = F2(function (x,
                 y) {
                    return x + y;
                 })(_v0._1)($Basics.sin(angle) * radius);
                 var newx = F2(function (x,y) {
                    return x + y;
                 })(_v0._0)($Basics.cos(angle) * radius);
                 return A2($Math$Vector2.vec2,
                 newx,
                 newy);
              }();}
         _U.badCase($moduleName,
         "between lines 13 and 15");
      }();
   });
   var triToPoints = F3(function (length,
   angle,
   _v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return function () {
                 var radius = triRadius(length);
                 return A2($List.map,
                 A2(rotatedPoint,
                 radius,
                 {ctor: "_Tuple2"
                 ,_0: _v4._0
                 ,_1: _v4._1}),
                 _L.fromArray([angle
                              ,angle + $Basics.pi * 2 / 3
                              ,angle + $Basics.pi * 4 / 3]));
              }();}
         _U.badCase($moduleName,
         "between lines 27 and 29");
      }();
   });
   var rectToPoints = F2(function (length,
   _v8) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2":
            return function () {
                 var radius = rectRadius(length);
                 return A2($List.map,
                 A2(rotatedPoint,
                 radius,
                 {ctor: "_Tuple2"
                 ,_0: _v8._0
                 ,_1: _v8._1}),
                 _L.fromArray([0
                              ,$Basics.pi / 2
                              ,$Basics.pi
                              ,(0 - $Basics.pi) / 2]));
              }();}
         _U.badCase($moduleName,
         "between lines 41 and 43");
      }();
   });
   _elm.RocketGeometry.values = {_op: _op
                                ,rotatedPoint: rotatedPoint
                                ,triRadius: triRadius
                                ,triToPoints: triToPoints
                                ,rectRadius: rectRadius
                                ,rectToPoints: rectToPoints};
   return _elm.RocketGeometry.values;
};